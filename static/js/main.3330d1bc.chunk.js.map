{"version":3,"sources":["components/Map.js","App.js","serviceWorker.js","index.js"],"names":["BaseLayer","LayersControl","position","Mapdata","state","color","colors","countryStyle","fillColor","fillOpacity","weight","changeCountryColor","event","target","setStyle","onEachFeature","country","layer","countryName","properties","ADMIN","bindPopup","options","Math","random","on","click","colorChange","setState","value","inputStyle","left","bottom","center","zoom","checked","name","TileLayer","url","attribution","ext","Marker","Popup","GeoJSON","data","mapData","features","style","this","type","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"88i4oBAKQA,EAAcC,IAAdD,UAEFE,EAAW,CAAC,QAAS,QAgFZC,E,4MA7EbC,MAAQ,CAAEC,MAAO,W,EAEjBC,OAAS,CAAC,QAAS,OAAQ,SAAU,SAAU,Q,EAE/CC,aAAa,CACXC,UAAW,SACXC,YAAa,EACbJ,MAAO,QACPK,OAAQ,G,EAGVC,mBAAqB,SAACC,GACpBA,EAAMC,OAAOC,SAAS,CACpBT,MAAO,QACPG,UAAW,EAAKJ,MAAMC,MACtBI,YAAa,K,EAIjBM,cAAgB,SAACC,EAASC,GACxB,IAAMC,EAAcF,EAAQG,WAAWC,MACvCH,EAAMI,UAAUH,GAChBD,EAAMK,QAAQb,YAAcc,KAAKC,SACjCP,EAAMQ,GAAG,CACPC,MAAO,EAAKf,sB,EAIhBgB,YAAc,SAACf,GACb,EAAKgB,SAAS,CAAEvB,MAAOO,EAAMC,OAAOgB,S,EAGtCC,WAAa,CACX,OAAU,IACV5B,SAAU,WACV6B,KAAM,KACNC,OAAQ,M,uDAIR,OACE,oCACA,kBAAC,IAAD,CAAKC,OAAQ/B,EAAUgC,KAAM,GAC3B,kBAACjC,EAAA,EAAD,CAAeC,SAAS,YACtB,kBAACF,EAAD,CAAWmC,SAAO,EAACC,KAAK,OACtB,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,4EAGhB,kBAACvC,EAAD,CAAWoC,KAAK,iBACd,kBAACC,EAAA,EAAD,CACEC,IAAI,yEACJC,YAAY,yEACZC,IAAI,UAIV,kBAACC,EAAA,EAAD,CAAQvC,SAAUA,GAChB,kBAACwC,EAAA,EAAD,aAAY,6BAAZ,+BAEF,kBAACC,EAAA,EAAD,CACCC,KAAMC,EAAQC,SACdC,MAAOC,KAAKzC,aACZQ,cAAeiC,KAAKjC,gBACpB,2BACCgC,MAAOC,KAAKlB,WACZmB,KAAK,QACLpB,MAAOmB,KAAK5C,MAAMC,MAClB6C,SAAUF,KAAKrB,oB,GAvEHwB,IAAMC,WCIbC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3330d1bc.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Map.css'\r\nimport { Map, Marker, Popup, TileLayer, LayersControl, GeoJSON } from 'react-leaflet'\r\nimport mapData from './../data/countries.json'\r\n\r\nconst { BaseLayer } = LayersControl\r\n\r\nconst position = [28.3949, 84.1240]\r\nclass Mapdata extends React.Component {\r\n\r\n  state = { color: \"#ffff00\" };\r\n\r\n  colors = [\"green\", \"blue\", \"yellow\", \"orange\", \"grey\"];\r\n\r\n  countryStyle={\r\n    fillColor: \"Yellow\",\r\n    fillOpacity: 1,\r\n    color: \"black\",\r\n    weight: 2\r\n  };\r\n\r\n  changeCountryColor = (event) => {\r\n    event.target.setStyle({\r\n      color: \"green\",\r\n      fillColor: this.state.color,\r\n      fillOpacity: 1,\r\n    });\r\n  };\r\n\r\n  onEachFeature = (country, layer) => {\r\n    const countryName = country.properties.ADMIN;\r\n    layer.bindPopup(countryName);\r\n    layer.options.fillOpacity = Math.random(); \r\n    layer.on({\r\n      click: this.changeCountryColor,\r\n    });\r\n  }\r\n\r\n  colorChange = (event) => {\r\n    this.setState({ color: event.target.value });\r\n  };\r\n\r\n  inputStyle = {\r\n    'zIndex': 10000,\r\n    position: 'absolute',\r\n    left: '5%',\r\n    bottom: '5%',\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      <Map center={position} zoom={7}>\r\n        <LayersControl position=\"topright\">\r\n          <BaseLayer checked name=\"osm\">\r\n            <TileLayer\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n            />\r\n          </BaseLayer>\r\n          <BaseLayer name=\"Steam Terrain\">\r\n            <TileLayer\r\n              url='https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}{r}.{ext}'\r\n              attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n              ext='png'\r\n            />\r\n          </BaseLayer>\r\n        </LayersControl>\r\n        <Marker position={position}>\r\n          <Popup>Nepal<br />A country of brave gorkha.</Popup>\r\n        </Marker>\r\n        <GeoJSON\r\n         data={mapData.features} \r\n         style={this.countryStyle}\r\n         onEachFeature={this.onEachFeature}/>\r\n         <input\r\n          style={this.inputStyle}\r\n          type=\"color\"\r\n          value={this.state.color}\r\n          onChange={this.colorChange}\r\n        />\r\n      </Map>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Mapdata;","import React from 'react';\r\nimport './App.css';\r\nimport Mapdata from './components/Map'\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Mapdata />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}